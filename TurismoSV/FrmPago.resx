<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        AAAAAAAA6T/7zAdbNTURrQAAAABJRU5ErkJggg==
</value>
  </data>
</root>